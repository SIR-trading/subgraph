require("dotenv").config();
const fs = require("fs");

// Network-specific contract addresses
const CONTRACT_ADDRESSES = {
  mainnet: {
    uniswapV3Factory: "0x1F98431c8aD98523631AE4a59f267346ea31F984",
    usdc: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    weth: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    startBlock: "20830200"
  },
  sepolia: {
    uniswapV3Factory: "0x0227628f3F023bb0B980b67D528571c95c6DaC1c",
    usdc: "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238",
    weth: "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",
    startBlock: "8619003"
  },
  localhost: {
    uniswapV3Factory: process.env.UNISWAP_V3_FACTORY_ADDRESS,
    usdc: process.env.USDC_ADDRESS,
    weth: process.env.WETH_ADDRESS,
    startBlock: "0"
  }
};

function generateSubgraphYaml() {
  const network = process.env.NETWORK || "localhost";
  const addresses = CONTRACT_ADDRESSES[network];
  
  if (!addresses) {
    throw new Error(`Unsupported network: ${network}`);
  }

  const subgraphTemplate = fs.readFileSync("subgraph.template.yaml", "utf-8");

  const replaced = subgraphTemplate
    .replaceAll("{{VAULT_ADDRESS}}", process.env.VAULT_ADDRESS)
    .replaceAll("{{SIR_ADDRESS}}", process.env.SIR_ADDRESS)
    .replaceAll("{{NETWORK}}", network)
    .replaceAll("{{START_BLOCK}}", addresses.startBlock);

  fs.writeFileSync("subgraph.yaml", replaced);
  console.log(`‚úÖ Generated subgraph.yaml for ${network} network`);
}

function generateContractsFile() {
  const network = process.env.NETWORK || "localhost";
  const addresses = CONTRACT_ADDRESSES[network];
  
  if (!addresses) {
    throw new Error(`Unsupported network: ${network}`);
  }

  const contractsContent = `// Auto-generated contract addresses for ${network} network
// Do not edit this file manually - it's generated by build.js

export const vaultAddress = "${process.env.VAULT_ADDRESS}";
export const sirAddress = "${process.env.SIR_ADDRESS}";
export const zeroAddress = "0x0000000000000000000000000000000000000000";

// Uniswap V3 Factory (same address on all networks)
export const uniswapV3FactoryAddress = "${addresses.uniswapV3Factory}";

// Network-specific token addresses
export const usdcAddress = "${addresses.usdc}";
export const wethAddress = "${addresses.weth}";
`;

  fs.writeFileSync("src/contracts.ts", contractsContent);
  console.log(`‚úÖ Generated src/contracts.ts for ${network} network`);
}

function main() {
  try {
    // Validate required environment variables
    const requiredVars = ["VAULT_ADDRESS", "SIR_ADDRESS"];
    for (const varName of requiredVars) {
      if (!process.env[varName]) {
        throw new Error(`Missing required environment variable: ${varName}`);
      }
    }

    generateSubgraphYaml();
    generateContractsFile();
    
    console.log("üéâ Build completed successfully!");
  } catch (error) {
    console.error("‚ùå Build failed:", error.message);
    process.exit(1);
  }
}

main();
