// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vaultIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultNewTax extends ethereum.Event {
  get params(): VaultNewTax__Params {
    return new VaultNewTax__Params(this);
  }
}

export class VaultNewTax__Params {
  _event: VaultNewTax;

  constructor(event: VaultNewTax) {
    this._event = event;
  }

  get vault(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tax(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get cumulativeTax(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Tea__paramsByIdResultValue0Struct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Tea__systemParamsResultSystemParams_Struct extends ethereum.Tuple {
  get baseFee(): Tea__systemParamsResultSystemParams_BaseFeeStruct {
    return changetype<Tea__systemParamsResultSystemParams_BaseFeeStruct>(
      this[0].toTuple(),
    );
  }

  get lpFee(): Tea__systemParamsResultSystemParams_LpFeeStruct {
    return changetype<Tea__systemParamsResultSystemParams_LpFeeStruct>(
      this[1].toTuple(),
    );
  }

  get mintingStopped(): boolean {
    return this[2].toBoolean();
  }

  get cumulativeTax(): i32 {
    return this[3].toI32();
  }
}

export class Tea__systemParamsResultSystemParams_BaseFeeStruct extends ethereum.Tuple {
  get fee(): i32 {
    return this[0].toI32();
  }

  get feeNew(): i32 {
    return this[1].toI32();
  }

  get timestampUpdate(): BigInt {
    return this[2].toBigInt();
  }
}

export class Tea__systemParamsResultSystemParams_LpFeeStruct extends ethereum.Tuple {
  get fee(): i32 {
    return this[0].toI32();
  }

  get feeNew(): i32 {
    return this[1].toI32();
  }

  get timestampUpdate(): BigInt {
    return this[2].toBigInt();
  }
}

export class Tea extends ethereum.SmartContract {
  static bind(address: Address): Tea {
    return new Tea("Tea", address);
  }

  SIR(): Address {
    let result = super.call("SIR", "SIR():(address)", []);

    return result[0].toAddress();
  }

  try_SIR(): ethereum.CallResult<Address> {
    let result = super.tryCall("SIR", "SIR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SYSTEM_CONTROL(): Address {
    let result = super.call("SYSTEM_CONTROL", "SYSTEM_CONTROL():(address)", []);

    return result[0].toAddress();
  }

  try_SYSTEM_CONTROL(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "SYSTEM_CONTROL",
      "SYSTEM_CONTROL():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TIMESTAMP_ISSUANCE_START(): BigInt {
    let result = super.call(
      "TIMESTAMP_ISSUANCE_START",
      "TIMESTAMP_ISSUANCE_START():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_TIMESTAMP_ISSUANCE_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TIMESTAMP_ISSUANCE_START",
      "TIMESTAMP_ISSUANCE_START():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, vaultId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultId),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(
    account: Address,
    vaultId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(
    owners: Array<Address>,
    vaultIds: Array<BigInt>,
  ): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultIds),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    vaultIds: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultIds),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  claimSIR(vaultId: BigInt, lper: Address): BigInt {
    let result = super.call("claimSIR", "claimSIR(uint256,address):(uint80)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
      ethereum.Value.fromAddress(lper),
    ]);

    return result[0].toBigInt();
  }

  try_claimSIR(vaultId: BigInt, lper: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimSIR",
      "claimSIR(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeSIRPerTEA(vaultId: BigInt): BigInt {
    let result = super.call(
      "cumulativeSIRPerTEA",
      "cumulativeSIRPerTEA(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );

    return result[0].toBigInt();
  }

  try_cumulativeSIRPerTEA(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeSIRPerTEA",
      "cumulativeSIRPerTEA(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numberOfVaults(): BigInt {
    let result = super.call("numberOfVaults", "numberOfVaults():(uint48)", []);

    return result[0].toBigInt();
  }

  try_numberOfVaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfVaults",
      "numberOfVaults():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paramsById(vaultId: BigInt): Tea__paramsByIdResultValue0Struct {
    let result = super.call(
      "paramsById",
      "paramsById(uint48):((address,address,int8))",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );

    return changetype<Tea__paramsByIdResultValue0Struct>(result[0].toTuple());
  }

  try_paramsById(
    vaultId: BigInt,
  ): ethereum.CallResult<Tea__paramsByIdResultValue0Struct> {
    let result = super.tryCall(
      "paramsById",
      "paramsById(uint48):((address,address,int8))",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Tea__paramsByIdResultValue0Struct>(value[0].toTuple()),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  systemParams(): Tea__systemParamsResultSystemParams_Struct {
    let result = super.call(
      "systemParams",
      "systemParams():(((uint16,uint16,uint40),(uint16,uint16,uint40),bool,uint16))",
      [],
    );

    return changetype<Tea__systemParamsResultSystemParams_Struct>(
      result[0].toTuple(),
    );
  }

  try_systemParams(): ethereum.CallResult<Tea__systemParamsResultSystemParams_Struct> {
    let result = super.tryCall(
      "systemParams",
      "systemParams():(((uint16,uint16,uint40),(uint16,uint16,uint40),bool,uint16))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Tea__systemParamsResultSystemParams_Struct>(
        value[0].toTuple(),
      ),
    );
  }

  totalSupply(vaultId: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimedRewards(vaultId: BigInt, lper: Address): BigInt {
    let result = super.call(
      "unclaimedRewards",
      "unclaimedRewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );

    return result[0].toBigInt();
  }

  try_unclaimedRewards(
    vaultId: BigInt,
    lper: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedRewards",
      "unclaimedRewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(vaultId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toString();
  }

  try_uri(vaultId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vaultTax(vaultId: BigInt): i32 {
    let result = super.call("vaultTax", "vaultTax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toI32();
  }

  try_vaultTax(vaultId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("vaultTax", "vaultTax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get systemControl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sir(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimSIRCall extends ethereum.Call {
  get inputs(): ClaimSIRCall__Inputs {
    return new ClaimSIRCall__Inputs(this);
  }

  get outputs(): ClaimSIRCall__Outputs {
    return new ClaimSIRCall__Outputs(this);
  }
}

export class ClaimSIRCall__Inputs {
  _call: ClaimSIRCall;

  constructor(call: ClaimSIRCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimSIRCall__Outputs {
  _call: ClaimSIRCall;

  constructor(call: ClaimSIRCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get vaultIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class UpdateSystemStateCall extends ethereum.Call {
  get inputs(): UpdateSystemStateCall__Inputs {
    return new UpdateSystemStateCall__Inputs(this);
  }

  get outputs(): UpdateSystemStateCall__Outputs {
    return new UpdateSystemStateCall__Outputs(this);
  }
}

export class UpdateSystemStateCall__Inputs {
  _call: UpdateSystemStateCall;

  constructor(call: UpdateSystemStateCall) {
    this._call = call;
  }

  get baseFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get lpFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get mintingStopped(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateSystemStateCall__Outputs {
  _call: UpdateSystemStateCall;

  constructor(call: UpdateSystemStateCall) {
    this._call = call;
  }
}

export class UpdateVaultsCall extends ethereum.Call {
  get inputs(): UpdateVaultsCall__Inputs {
    return new UpdateVaultsCall__Inputs(this);
  }

  get outputs(): UpdateVaultsCall__Outputs {
    return new UpdateVaultsCall__Outputs(this);
  }
}

export class UpdateVaultsCall__Inputs {
  _call: UpdateVaultsCall;

  constructor(call: UpdateVaultsCall) {
    this._call = call;
  }

  get oldVaults(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get newVaults(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get newTaxes(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get cumulativeTax(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateVaultsCall__Outputs {
  _call: UpdateVaultsCall;

  constructor(call: UpdateVaultsCall) {
    this._call = call;
  }
}
