// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vault | null {
    return changetype<Vault | null>(store.get_in_block("Vault", id));
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): string {
    let value = this.get("vaultId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultId(value: string) {
    this.set("vaultId", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get debtToken(): string {
    let value = this.get("debtToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtToken(value: string) {
    this.set("debtToken", Value.fromString(value));
  }

  get collateralSymbol(): string {
    let value = this.get("collateralSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralSymbol(value: string) {
    this.set("collateralSymbol", Value.fromString(value));
  }

  get debtSymbol(): string {
    let value = this.get("debtSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtSymbol(value: string) {
    this.set("debtSymbol", Value.fromString(value));
  }

  get leverageTier(): i32 {
    let value = this.get("leverageTier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set leverageTier(value: i32) {
    this.set("leverageTier", Value.fromI32(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get totalValueUsd(): BigInt {
    let value = this.get("totalValueUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValueUsd(value: BigInt) {
    this.set("totalValueUsd", Value.fromBigInt(value));
  }

  get totalVolumeUsd(): BigInt {
    let value = this.get("totalVolumeUsd");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeUsd(value: BigInt) {
    this.set("totalVolumeUsd", Value.fromBigInt(value));
  }

  get sortKey(): BigInt {
    let value = this.get("sortKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sortKey(value: BigInt) {
    this.set("sortKey", Value.fromBigInt(value));
  }

  get lockedLiquidity(): BigInt {
    let value = this.get("lockedLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lockedLiquidity(value: BigInt) {
    this.set("lockedLiquidity", Value.fromBigInt(value));
  }

  get totalTea(): BigInt {
    let value = this.get("totalTea");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTea(value: BigInt) {
    this.set("totalTea", Value.fromBigInt(value));
  }

  get apeCollateral(): BigInt {
    let value = this.get("apeCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set apeCollateral(value: BigInt) {
    this.set("apeCollateral", Value.fromBigInt(value));
  }

  get teaCollateral(): BigInt {
    let value = this.get("teaCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set teaCollateral(value: BigInt) {
    this.set("teaCollateral", Value.fromBigInt(value));
  }

  get taxAmount(): BigInt {
    let value = this.get("taxAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set taxAmount(value: BigInt) {
    this.set("taxAmount", Value.fromBigInt(value));
  }

  get apeAddress(): Bytes {
    let value = this.get("apeAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set apeAddress(value: Bytes) {
    this.set("apeAddress", Value.fromBytes(value));
  }

  get apeDecimals(): i32 {
    let value = this.get("apeDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set apeDecimals(value: i32) {
    this.set("apeDecimals", Value.fromI32(value));
  }
}

export class Test extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Test entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Test must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Test", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Test | null {
    return changetype<Test | null>(store.get_in_block("Test", id));
  }

  static load(id: string): Test | null {
    return changetype<Test | null>(store.get("Test", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class UserPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserPosition | null {
    return changetype<UserPosition | null>(
      store.get_in_block("UserPosition", id),
    );
  }

  static load(id: string): UserPosition | null {
    return changetype<UserPosition | null>(store.get("UserPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get positionDecimals(): i32 {
    let value = this.get("positionDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionDecimals(value: i32) {
    this.set("positionDecimals", Value.fromI32(value));
  }

  get APE(): string {
    let value = this.get("APE");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set APE(value: string) {
    this.set("APE", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get collateralSymbol(): string {
    let value = this.get("collateralSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralSymbol(value: string) {
    this.set("collateralSymbol", Value.fromString(value));
  }

  get debtSymbol(): string {
    let value = this.get("debtSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtSymbol(value: string) {
    this.set("debtSymbol", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get debtToken(): string {
    let value = this.get("debtToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtToken(value: string) {
    this.set("debtToken", Value.fromString(value));
  }

  get leverageTier(): string {
    let value = this.get("leverageTier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set leverageTier(value: string) {
    this.set("leverageTier", Value.fromString(value));
  }

  get vaultId(): string {
    let value = this.get("vaultId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultId(value: string) {
    this.set("vaultId", Value.fromString(value));
  }
}

export class UserPositionTea extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserPositionTea entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserPositionTea must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserPositionTea", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserPositionTea | null {
    return changetype<UserPositionTea | null>(
      store.get_in_block("UserPositionTea", id),
    );
  }

  static load(id: string): UserPositionTea | null {
    return changetype<UserPositionTea | null>(store.get("UserPositionTea", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positionDecimals(): i32 {
    let value = this.get("positionDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set positionDecimals(value: i32) {
    this.set("positionDecimals", Value.fromI32(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get collateralSymbol(): string {
    let value = this.get("collateralSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateralSymbol(value: string) {
    this.set("collateralSymbol", Value.fromString(value));
  }

  get debtSymbol(): string {
    let value = this.get("debtSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set debtSymbol(value: string) {
    this.set("debtSymbol", Value.fromString(value));
  }

  get collateralToken(): Bytes {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralToken(value: Bytes) {
    this.set("collateralToken", Value.fromBytes(value));
  }

  get debtToken(): Bytes {
    let value = this.get("debtToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set debtToken(value: Bytes) {
    this.set("debtToken", Value.fromBytes(value));
  }

  get leverageTier(): string {
    let value = this.get("leverageTier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set leverageTier(value: string) {
    this.set("leverageTier", Value.fromString(value));
  }

  get vaultId(): string {
    let value = this.get("vaultId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultId(value: string) {
    this.set("vaultId", Value.fromString(value));
  }
}

export class Dividends extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dividends entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dividends must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Dividends", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Dividends | null {
    return changetype<Dividends | null>(store.get_in_block("Dividends", id));
  }

  static load(id: string): Dividends | null {
    return changetype<Dividends | null>(store.get("Dividends", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get sirUsdPrice(): BigInt {
    let value = this.get("sirUsdPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sirUsdPrice(value: BigInt) {
    this.set("sirUsdPrice", Value.fromBigInt(value));
  }

  get stakedAmount(): BigInt {
    let value = this.get("stakedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakedAmount(value: BigInt) {
    this.set("stakedAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Auction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Auction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Auction | null {
    return changetype<Auction | null>(store.get_in_block("Auction", id));
  }

  static load(id: string): Auction | null {
    return changetype<Auction | null>(store.get("Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get highestBid(): BigInt {
    let value = this.get("highestBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set highestBid(value: BigInt) {
    this.set("highestBid", Value.fromBigInt(value));
  }

  get highestBidder(): Bytes {
    let value = this.get("highestBidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set highestBidder(value: Bytes) {
    this.set("highestBidder", Value.fromBytes(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get isClaimed(): boolean {
    let value = this.get("isClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isClaimed(value: boolean) {
    this.set("isClaimed", Value.fromBoolean(value));
  }

  get participants(): AuctionsParticipantLoader {
    return new AuctionsParticipantLoader(
      "Auction",
      this.get("id")!.toString(),
      "participants",
    );
  }
}

export class AuctionsParticipant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionsParticipant entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionsParticipant must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionsParticipant", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionsParticipant | null {
    return changetype<AuctionsParticipant | null>(
      store.get_in_block("AuctionsParticipant", id),
    );
  }

  static load(id: string): AuctionsParticipant | null {
    return changetype<AuctionsParticipant | null>(
      store.get("AuctionsParticipant", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctionId(): string {
    let value = this.get("auctionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set auctionId(value: string) {
    this.set("auctionId", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get bid(): BigInt {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bid(value: BigInt) {
    this.set("bid", Value.fromBigInt(value));
  }
}

export class AuctionsHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionsHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionsHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionsHistory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionsHistory | null {
    return changetype<AuctionsHistory | null>(
      store.get_in_block("AuctionsHistory", id),
    );
  }

  static load(id: string): AuctionsHistory | null {
    return changetype<AuctionsHistory | null>(store.get("AuctionsHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get highestBid(): BigInt {
    let value = this.get("highestBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set highestBid(value: BigInt) {
    this.set("highestBid", Value.fromBigInt(value));
  }

  get highestBidder(): Bytes {
    let value = this.get("highestBidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set highestBidder(value: Bytes) {
    this.set("highestBidder", Value.fromBytes(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }
}

export class ApePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApePosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApePosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ApePosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ApePosition | null {
    return changetype<ApePosition | null>(
      store.get_in_block("ApePosition", id),
    );
  }

  static load(id: string): ApePosition | null {
    return changetype<ApePosition | null>(store.get("ApePosition", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): string {
    let value = this.get("vaultId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultId(value: string) {
    this.set("vaultId", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get collateralTotal(): BigInt {
    let value = this.get("collateralTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralTotal(value: BigInt) {
    this.set("collateralTotal", Value.fromBigInt(value));
  }

  get dollarTotal(): BigInt {
    let value = this.get("dollarTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dollarTotal(value: BigInt) {
    this.set("dollarTotal", Value.fromBigInt(value));
  }

  get apeBalance(): BigInt {
    let value = this.get("apeBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set apeBalance(value: BigInt) {
    this.set("apeBalance", Value.fromBigInt(value));
  }
}

export class ClosedApePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ClosedApePosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClosedApePosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ClosedApePosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ClosedApePosition | null {
    return changetype<ClosedApePosition | null>(
      store.get_in_block("ClosedApePosition", id),
    );
  }

  static load(id: string): ClosedApePosition | null {
    return changetype<ClosedApePosition | null>(
      store.get("ClosedApePosition", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): string {
    let value = this.get("vaultId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vaultId(value: string) {
    this.set("vaultId", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get collateralDeposited(): BigInt {
    let value = this.get("collateralDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralDeposited(value: BigInt) {
    this.set("collateralDeposited", Value.fromBigInt(value));
  }

  get dollarDeposited(): BigInt {
    let value = this.get("dollarDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dollarDeposited(value: BigInt) {
    this.set("dollarDeposited", Value.fromBigInt(value));
  }

  get collateralWithdrawn(): BigInt {
    let value = this.get("collateralWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralWithdrawn(value: BigInt) {
    this.set("collateralWithdrawn", Value.fromBigInt(value));
  }

  get dollarWithdrawn(): BigInt {
    let value = this.get("dollarWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dollarWithdrawn(value: BigInt) {
    this.set("dollarWithdrawn", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get priceAtBurn(): BigInt {
    let value = this.get("priceAtBurn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set priceAtBurn(value: BigInt) {
    this.set("priceAtBurn", Value.fromBigInt(value));
  }
}

export class AuctionsParticipantLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AuctionsParticipant[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AuctionsParticipant[]>(value);
  }
}
