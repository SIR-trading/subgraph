// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AuctionedTokensSentToWinner extends ethereum.Event {
  get params(): AuctionedTokensSentToWinner__Params {
    return new AuctionedTokensSentToWinner__Params(this);
  }
}

export class AuctionedTokensSentToWinner__Params {
  _event: AuctionedTokensSentToWinner;

  constructor(event: AuctionedTokensSentToWinner) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BidReceived extends ethereum.Event {
  get params(): BidReceived__Params {
    return new BidReceived__Params(this);
  }
}

export class BidReceived__Params {
  _event: BidReceived;

  constructor(event: BidReceived) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get previousBid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newBid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DividendsClaimed extends ethereum.Event {
  get params(): DividendsClaimed__Params {
    return new DividendsClaimed__Params(this);
  }
}

export class DividendsClaimed__Params {
  _event: DividendsClaimed;

  constructor(event: DividendsClaimed) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DividendsPaid extends ethereum.Event {
  get params(): DividendsPaid__Params {
    return new DividendsPaid__Params(this);
  }
}

export class DividendsPaid__Params {
  _event: DividendsPaid;

  constructor(event: DividendsPaid) {
    this._event = event;
  }

  get amountETH(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Sir__auctionsResultValue0Struct extends ethereum.Tuple {
  get bidder(): Address {
    return this[0].toAddress();
  }

  get bid(): BigInt {
    return this[1].toBigInt();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }
}

export class Sir__stakersParamsResultValue0Struct extends ethereum.Tuple {
  get stake(): BigInt {
    return this[0].toBigInt();
  }

  get cumulativeETHPerSIRx80(): BigInt {
    return this[1].toBigInt();
  }
}

export class Sir extends ethereum.SmartContract {
  static bind(address: Address): Sir {
    return new Sir("Sir", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ISSUANCE_RATE(): BigInt {
    let result = super.call("ISSUANCE_RATE", "ISSUANCE_RATE():(uint72)", []);

    return result[0].toBigInt();
  }

  try_ISSUANCE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ISSUANCE_RATE", "ISSUANCE_RATE():(uint72)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LP_ISSUANCE_FIRST_3_YEARS(): BigInt {
    let result = super.call(
      "LP_ISSUANCE_FIRST_3_YEARS",
      "LP_ISSUANCE_FIRST_3_YEARS():(uint72)",
      [],
    );

    return result[0].toBigInt();
  }

  try_LP_ISSUANCE_FIRST_3_YEARS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LP_ISSUANCE_FIRST_3_YEARS",
      "LP_ISSUANCE_FIRST_3_YEARS():(uint72)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auctions(token: Address): Sir__auctionsResultValue0Struct {
    let result = super.call(
      "auctions",
      "auctions(address):((address,uint96,uint40))",
      [ethereum.Value.fromAddress(token)],
    );

    return changetype<Sir__auctionsResultValue0Struct>(result[0].toTuple());
  }

  try_auctions(
    token: Address,
  ): ethereum.CallResult<Sir__auctionsResultValue0Struct> {
    let result = super.tryCall(
      "auctions",
      "auctions(address):((address,uint96,uint40))",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Sir__auctionsResultValue0Struct>(value[0].toTuple()),
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(): BigInt {
    let result = super.call("claim", "claim():(uint96)", []);

    return result[0].toBigInt();
  }

  try_claim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectFeesAndStartAuction(token: Address): BigInt {
    let result = super.call(
      "collectFeesAndStartAuction",
      "collectFeesAndStartAuction(address):(uint112)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_collectFeesAndStartAuction(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectFeesAndStartAuction",
      "collectFeesAndStartAuction(address):(uint112)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributorMint(): BigInt {
    let result = super.call(
      "contributorMint",
      "contributorMint():(uint80)",
      [],
    );

    return result[0].toBigInt();
  }

  try_contributorMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributorMint",
      "contributorMint():(uint80)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributorUnclaimedSIR(contributor: Address): BigInt {
    let result = super.call(
      "contributorUnclaimedSIR",
      "contributorUnclaimedSIR(address):(uint80)",
      [ethereum.Value.fromAddress(contributor)],
    );

    return result[0].toBigInt();
  }

  try_contributorUnclaimedSIR(
    contributor: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contributorUnclaimedSIR",
      "contributorUnclaimedSIR(address):(uint80)",
      [ethereum.Value.fromAddress(contributor)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dividends(staker: Address): BigInt {
    let result = super.call("dividends", "dividends(address):(uint96)", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBigInt();
  }

  try_dividends(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dividends", "dividends(address):(uint96)", [
      ethereum.Value.fromAddress(staker),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lPerMint(vaultId: BigInt): BigInt {
    let result = super.call("lPerMint", "lPerMint(uint256):(uint80)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toBigInt();
  }

  try_lPerMint(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lPerMint", "lPerMint(uint256):(uint80)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTotalSupply(): BigInt {
    let result = super.call("maxTotalSupply", "maxTotalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTotalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalSupply",
      "maxTotalSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakersParams(staker: Address): Sir__stakersParamsResultValue0Struct {
    let result = super.call(
      "stakersParams",
      "stakersParams(address):((uint80,uint176))",
      [ethereum.Value.fromAddress(staker)],
    );

    return changetype<Sir__stakersParamsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_stakersParams(
    staker: Address,
  ): ethereum.CallResult<Sir__stakersParamsResultValue0Struct> {
    let result = super.tryCall(
      "stakersParams",
      "stakersParams(address):((uint80,uint176))",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Sir__stakersParamsResultValue0Struct>(value[0].toTuple()),
    );
  }

  supply(): BigInt {
    let result = super.call("supply", "supply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_supply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supply", "supply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBalanceOf(account: Address): BigInt {
    let result = super.call(
      "totalBalanceOf",
      "totalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_totalBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBalanceOf",
      "totalBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstakeAndClaim(amount: BigInt): BigInt {
    let result = super.call(
      "unstakeAndClaim",
      "unstakeAndClaim(uint80):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );

    return result[0].toBigInt();
  }

  try_unstakeAndClaim(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeAndClaim",
      "unstakeAndClaim(uint80):(uint96)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get dividends_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectFeesAndStartAuctionCall extends ethereum.Call {
  get inputs(): CollectFeesAndStartAuctionCall__Inputs {
    return new CollectFeesAndStartAuctionCall__Inputs(this);
  }

  get outputs(): CollectFeesAndStartAuctionCall__Outputs {
    return new CollectFeesAndStartAuctionCall__Outputs(this);
  }
}

export class CollectFeesAndStartAuctionCall__Inputs {
  _call: CollectFeesAndStartAuctionCall;

  constructor(call: CollectFeesAndStartAuctionCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectFeesAndStartAuctionCall__Outputs {
  _call: CollectFeesAndStartAuctionCall;

  constructor(call: CollectFeesAndStartAuctionCall) {
    this._call = call;
  }

  get totalFeesToStakers(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ContributorMintCall extends ethereum.Call {
  get inputs(): ContributorMintCall__Inputs {
    return new ContributorMintCall__Inputs(this);
  }

  get outputs(): ContributorMintCall__Outputs {
    return new ContributorMintCall__Outputs(this);
  }
}

export class ContributorMintCall__Inputs {
  _call: ContributorMintCall;

  constructor(call: ContributorMintCall) {
    this._call = call;
  }
}

export class ContributorMintCall__Outputs {
  _call: ContributorMintCall;

  constructor(call: ContributorMintCall) {
    this._call = call;
  }

  get rewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get vault_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LPerMintCall extends ethereum.Call {
  get inputs(): LPerMintCall__Inputs {
    return new LPerMintCall__Inputs(this);
  }

  get outputs(): LPerMintCall__Outputs {
    return new LPerMintCall__Outputs(this);
  }
}

export class LPerMintCall__Inputs {
  _call: LPerMintCall;

  constructor(call: LPerMintCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LPerMintCall__Outputs {
  _call: LPerMintCall;

  constructor(call: LPerMintCall) {
    this._call = call;
  }

  get rewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PayAuctionWinnerCall extends ethereum.Call {
  get inputs(): PayAuctionWinnerCall__Inputs {
    return new PayAuctionWinnerCall__Inputs(this);
  }

  get outputs(): PayAuctionWinnerCall__Outputs {
    return new PayAuctionWinnerCall__Outputs(this);
  }
}

export class PayAuctionWinnerCall__Inputs {
  _call: PayAuctionWinnerCall;

  constructor(call: PayAuctionWinnerCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PayAuctionWinnerCall__Outputs {
  _call: PayAuctionWinnerCall;

  constructor(call: PayAuctionWinnerCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeAndClaimCall extends ethereum.Call {
  get inputs(): UnstakeAndClaimCall__Inputs {
    return new UnstakeAndClaimCall__Inputs(this);
  }

  get outputs(): UnstakeAndClaimCall__Outputs {
    return new UnstakeAndClaimCall__Outputs(this);
  }
}

export class UnstakeAndClaimCall__Inputs {
  _call: UnstakeAndClaimCall;

  constructor(call: UnstakeAndClaimCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeAndClaimCall__Outputs {
  _call: UnstakeAndClaimCall;

  constructor(call: UnstakeAndClaimCall) {
    this._call = call;
  }

  get dividends_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
