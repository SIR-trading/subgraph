// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class approvalforall extends ethereum.Event {
  get params(): approvalforall__Params {
    return new approvalforall__Params(this);
  }
}

export class approvalforall__Params {
  _event: approvalforall;

  constructor(event: approvalforall) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class burn extends ethereum.Event {
  get params(): burn__Params {
    return new burn__Params(this);
  }
}

export class burn__Params {
  _event: burn;

  constructor(event: burn) {
    this._event = event;
  }

  get vaultid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralwithdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class mint extends ethereum.Event {
  get params(): mint__Params {
    return new mint__Params(this);
  }
}

export class mint__Params {
  _event: mint;

  constructor(event: mint) {
    this._event = event;
  }

  get vaultid(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateraldeposited(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class transferbatch extends ethereum.Event {
  get params(): transferbatch__Params {
    return new transferbatch__Params(this);
  }
}

export class transferbatch__Params {
  _event: transferbatch;

  constructor(event: transferbatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vaultids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class transfersingle extends ethereum.Event {
  get params(): transfersingle__Params {
    return new transfersingle__Params(this);
  }
}

export class transfersingle__Params {
  _event: transfersingle;

  constructor(event: transfersingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class uri extends ethereum.Event {
  get params(): uri__Params {
    return new uri__Params(this);
  }
}

export class uri__Params {
  _event: uri;

  constructor(event: uri) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class vaultnewtax extends ethereum.Event {
  get params(): vaultnewtax__Params {
    return new vaultnewtax__Params(this);
  }
}

export class vaultnewtax__Params {
  _event: vaultnewtax;

  constructor(event: vaultnewtax) {
    this._event = event;
  }

  get vault(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tax(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get cumtax(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Vault__burnInputVaultparamsStruct extends ethereum.Tuple {
  get debttoken(): Address {
    return this[0].toAddress();
  }

  get collateraltoken(): Address {
    return this[1].toAddress();
  }

  get leveragetier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__getreservesResultValue0Struct extends ethereum.Tuple {
  get reserveapes(): BigInt {
    return this[0].toBigInt();
  }

  get reservelpers(): BigInt {
    return this[1].toBigInt();
  }

  get tickpricex42(): BigInt {
    return this[2].toBigInt();
  }
}

export class Vault__getreservesInputVaultparamsStruct extends ethereum.Tuple {
  get debttoken(): Address {
    return this[0].toAddress();
  }

  get collateraltoken(): Address {
    return this[1].toAddress();
  }

  get leveragetier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latesttokenparamsResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latesttokenparamsResultValue1Struct extends ethereum.Tuple {
  get debttoken(): Address {
    return this[0].toAddress();
  }

  get collateraltoken(): Address {
    return this[1].toAddress();
  }

  get leveragetier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latesttokenparamsResult {
  value0: Vault__latesttokenparamsResultValue0Struct;
  value1: Vault__latesttokenparamsResultValue1Struct;

  constructor(
    value0: Vault__latesttokenparamsResultValue0Struct,
    value1: Vault__latesttokenparamsResultValue1Struct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getValue0(): Vault__latesttokenparamsResultValue0Struct {
    return this.value0;
  }

  getValue1(): Vault__latesttokenparamsResultValue1Struct {
    return this.value1;
  }
}

export class Vault__mintInputVaultparamsStruct extends ethereum.Tuple {
  get debttoken(): Address {
    return this[0].toAddress();
  }

  get collateraltoken(): Address {
    return this[1].toAddress();
  }

  get leveragetier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__paramsbyidResult {
  value0: Address;
  value1: Address;
  value2: i32;

  constructor(value0: Address, value1: Address, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    return map;
  }

  getDebttoken(): Address {
    return this.value0;
  }

  getCollateraltoken(): Address {
    return this.value1;
  }

  getLeveragetier(): i32 {
    return this.value2;
  }
}

export class Vault__systemparamsResult {
  value0: i32;
  value1: i32;
  value2: boolean;
  value3: i32;

  constructor(value0: i32, value1: i32, value2: boolean, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    return map;
  }

  getBasefee(): i32 {
    return this.value0;
  }

  getLpfee(): i32 {
    return this.value1;
  }

  getMintingstopped(): boolean {
    return this.value2;
  }

  getCumtax(): i32 {
    return this.value3;
  }
}

export class Vault__tokenstatesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollectedfees(): BigInt {
    return this.value0;
  }

  getTotal(): BigInt {
    return this.value1;
  }
}

export class Vault__vaultstatesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getReserve(): BigInt {
    return this.value0;
  }

  getTickpricesatx42(): BigInt {
    return this.value1;
  }

  getVaultid(): BigInt {
    return this.value2;
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  ts_issuance_start(): BigInt {
    let result = super.call(
      "ts_issuance_start",
      "ts_issuance_start():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ts_issuance_start(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ts_issuance_start",
      "ts_issuance_start():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceof(account: Address, vaultid: BigInt): BigInt {
    let result = super.call(
      "balanceof",
      "balanceof(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultid),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceof(
    account: Address,
    vaultid: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceof",
      "balanceof(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultid),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceofbatch(
    owners: Array<Address>,
    vaultids: Array<BigInt>,
  ): Array<BigInt> {
    let result = super.call(
      "balanceofbatch",
      "balanceofbatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceofbatch(
    owners: Array<Address>,
    vaultids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceofbatch",
      "balanceofbatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  burn(
    isape: boolean,
    vaultparams: Vault__burnInputVaultparamsStruct,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "burn",
      "burn(bool,(address,address,int8),uint256):(uint144)",
      [
        ethereum.Value.fromBoolean(isape),
        ethereum.Value.fromTuple(vaultparams),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_burn(
    isape: boolean,
    vaultparams: Vault__burnInputVaultparamsStruct,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burn",
      "burn(bool,(address,address,int8),uint256):(uint144)",
      [
        ethereum.Value.fromBoolean(isape),
        ethereum.Value.fromTuple(vaultparams),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimsir(vaultid: BigInt, lper: Address): BigInt {
    let result = super.call("claimsir", "claimsir(uint256,address):(uint80)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
      ethereum.Value.fromAddress(lper),
    ]);

    return result[0].toBigInt();
  }

  try_claimsir(vaultid: BigInt, lper: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimsir",
      "claimsir(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultid),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativesirpertea(vaultid: BigInt): BigInt {
    let result = super.call(
      "cumulativesirpertea",
      "cumulativesirpertea(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultid)],
    );

    return result[0].toBigInt();
  }

  try_cumulativesirpertea(vaultid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativesirpertea",
      "cumulativesirpertea(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getreserves(
    vaultparams: Vault__getreservesInputVaultparamsStruct,
  ): Vault__getreservesResultValue0Struct {
    let result = super.call(
      "getreserves",
      "getreserves((address,address,int8)):((uint144,uint144,int64))",
      [ethereum.Value.fromTuple(vaultparams)],
    );

    return changetype<Vault__getreservesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getreserves(
    vaultparams: Vault__getreservesInputVaultparamsStruct,
  ): ethereum.CallResult<Vault__getreservesResultValue0Struct> {
    let result = super.tryCall(
      "getreserves",
      "getreserves((address,address,int8)):((uint144,uint144,int64))",
      [ethereum.Value.fromTuple(vaultparams)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__getreservesResultValue0Struct>(value[0].toTuple()),
    );
  }

  isapprovedforall(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isapprovedforall",
      "isapprovedforall(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_isapprovedforall(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isapprovedforall",
      "isapprovedforall(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latesttokenparams(): Vault__latesttokenparamsResult {
    let result = super.call(
      "latesttokenparams",
      "latesttokenparams():((string,string,uint8),(address,address,int8))",
      [],
    );

    return changetype<Vault__latesttokenparamsResult>(
      new Vault__latesttokenparamsResult(
        changetype<Vault__latesttokenparamsResultValue0Struct>(
          result[0].toTuple(),
        ),
        changetype<Vault__latesttokenparamsResultValue1Struct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_latesttokenparams(): ethereum.CallResult<Vault__latesttokenparamsResult> {
    let result = super.tryCall(
      "latesttokenparams",
      "latesttokenparams():((string,string,uint8),(address,address,int8))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__latesttokenparamsResult>(
        new Vault__latesttokenparamsResult(
          changetype<Vault__latesttokenparamsResultValue0Struct>(
            value[0].toTuple(),
          ),
          changetype<Vault__latesttokenparamsResultValue1Struct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  mint(isape: boolean, vaultparams: Vault__mintInputVaultparamsStruct): BigInt {
    let result = super.call(
      "mint",
      "mint(bool,(address,address,int8)):(uint256)",
      [
        ethereum.Value.fromBoolean(isape),
        ethereum.Value.fromTuple(vaultparams),
      ],
    );

    return result[0].toBigInt();
  }

  try_mint(
    isape: boolean,
    vaultparams: Vault__mintInputVaultparamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(bool,(address,address,int8)):(uint256)",
      [
        ethereum.Value.fromBoolean(isape),
        ethereum.Value.fromTuple(vaultparams),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberofvaults(): BigInt {
    let result = super.call("numberofvaults", "numberofvaults():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numberofvaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberofvaults",
      "numberofvaults():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onerc1155batchreceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onerc1155batchreceived",
      "onerc1155batchreceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onerc1155batchreceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onerc1155batchreceived",
      "onerc1155batchreceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onerc1155received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onerc1155received",
      "onerc1155received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onerc1155received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onerc1155received",
      "onerc1155received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paramsbyid(param0: BigInt): Vault__paramsbyidResult {
    let result = super.call(
      "paramsbyid",
      "paramsbyid(uint256):(address,address,int8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Vault__paramsbyidResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toI32(),
    );
  }

  try_paramsbyid(param0: BigInt): ethereum.CallResult<Vault__paramsbyidResult> {
    let result = super.tryCall(
      "paramsbyid",
      "paramsbyid(uint256):(address,address,int8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__paramsbyidResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toI32(),
      ),
    );
  }

  supportsinterface(interfaceid: Bytes): boolean {
    let result = super.call(
      "supportsinterface",
      "supportsinterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceid)],
    );

    return result[0].toBoolean();
  }

  try_supportsinterface(interfaceid: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsinterface",
      "supportsinterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  systemparams(): Vault__systemparamsResult {
    let result = super.call(
      "systemparams",
      "systemparams():(uint16,uint16,bool,uint16)",
      [],
    );

    return new Vault__systemparamsResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toBoolean(),
      result[3].toI32(),
    );
  }

  try_systemparams(): ethereum.CallResult<Vault__systemparamsResult> {
    let result = super.tryCall(
      "systemparams",
      "systemparams():(uint16,uint16,bool,uint16)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__systemparamsResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toBoolean(),
        value[3].toI32(),
      ),
    );
  }

  tokenstates(collateral: Address): Vault__tokenstatesResult {
    let result = super.call(
      "tokenstates",
      "tokenstates(address):(uint112,uint144)",
      [ethereum.Value.fromAddress(collateral)],
    );

    return new Vault__tokenstatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_tokenstates(
    collateral: Address,
  ): ethereum.CallResult<Vault__tokenstatesResult> {
    let result = super.tryCall(
      "tokenstates",
      "tokenstates(address):(uint112,uint144)",
      [ethereum.Value.fromAddress(collateral)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__tokenstatesResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  totalsupply(vaultid: BigInt): BigInt {
    let result = super.call("totalsupply", "totalsupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
    ]);

    return result[0].toBigInt();
  }

  try_totalsupply(vaultid: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalsupply",
      "totalsupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimedrewards(vaultid: BigInt, lper: Address): BigInt {
    let result = super.call(
      "unclaimedrewards",
      "unclaimedrewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultid),
        ethereum.Value.fromAddress(lper),
      ],
    );

    return result[0].toBigInt();
  }

  try_unclaimedrewards(
    vaultid: BigInt,
    lper: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedrewards",
      "unclaimedrewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultid),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(vaultid: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
    ]);

    return result[0].toString();
  }

  try_uri(vaultid: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vaultstates(
    debttoken: Address,
    collateraltoken: Address,
    leveragetier: i32,
  ): Vault__vaultstatesResult {
    let result = super.call(
      "vaultstates",
      "vaultstates(address,address,int8):(uint144,int64,uint48)",
      [
        ethereum.Value.fromAddress(debttoken),
        ethereum.Value.fromAddress(collateraltoken),
        ethereum.Value.fromI32(leveragetier),
      ],
    );

    return new Vault__vaultstatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_vaultstates(
    debttoken: Address,
    collateraltoken: Address,
    leveragetier: i32,
  ): ethereum.CallResult<Vault__vaultstatesResult> {
    let result = super.tryCall(
      "vaultstates",
      "vaultstates(address,address,int8):(uint144,int64,uint48)",
      [
        ethereum.Value.fromAddress(debttoken),
        ethereum.Value.fromAddress(collateraltoken),
        ethereum.Value.fromI32(leveragetier),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__vaultstatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  vaulttax(vaultid: BigInt): i32 {
    let result = super.call("vaulttax", "vaulttax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
    ]);

    return result[0].toI32();
  }

  try_vaulttax(vaultid: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("vaulttax", "vaulttax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  withdrawfees(token: Address): BigInt {
    let result = super.call("withdrawfees", "withdrawfees(address):(uint112)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toBigInt();
  }

  try_withdrawfees(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawfees",
      "withdrawfees(address):(uint112)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawtosavesystem(tokens: Array<Address>, to: Address): Array<BigInt> {
    let result = super.call(
      "withdrawtosavesystem",
      "withdrawtosavesystem(address[],address):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens), ethereum.Value.fromAddress(to)],
    );

    return result[0].toBigIntArray();
  }

  try_withdrawtosavesystem(
    tokens: Array<Address>,
    to: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdrawtosavesystem",
      "withdrawtosavesystem(address[],address):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens), ethereum.Value.fromAddress(to)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}
