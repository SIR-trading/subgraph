// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isAPE(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get collateralWithdrawn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralFeeToLPers(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isAPE(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get collateralIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralFeeToLPers(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vaultIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultNewTax extends ethereum.Event {
  get params(): VaultNewTax__Params {
    return new VaultNewTax__Params(this);
  }
}

export class VaultNewTax__Params {
  _event: VaultNewTax;

  constructor(event: VaultNewTax) {
    this._event = event;
  }

  get vault(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tax(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get cumTax(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Vault__burnInputVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__collateralStatesResultValue0Struct extends ethereum.Tuple {
  get totalFeesToStakers(): BigInt {
    return this[0].toBigInt();
  }

  get total(): BigInt {
    return this[1].toBigInt();
  }
}

export class Vault__getReservesResultValue0Struct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class Vault__getReservesInputVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latestTokenParamsResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get decimals(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latestTokenParamsResultValue1Struct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__latestTokenParamsResult {
  value0: Vault__latestTokenParamsResultValue0Struct;
  value1: Vault__latestTokenParamsResultValue1Struct;

  constructor(
    value0: Vault__latestTokenParamsResultValue0Struct,
    value1: Vault__latestTokenParamsResultValue1Struct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getValue0(): Vault__latestTokenParamsResultValue0Struct {
    return this.value0;
  }

  getValue1(): Vault__latestTokenParamsResultValue1Struct {
    return this.value1;
  }
}

export class Vault__mintInputVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__paramsByIdResultValue0Struct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault__systemParamsResultValue0Struct extends ethereum.Tuple {
  get baseFee(): i32 {
    return this[0].toI32();
  }

  get lpFee(): i32 {
    return this[1].toI32();
  }

  get mintingStopped(): boolean {
    return this[2].toBoolean();
  }

  get cumTax(): i32 {
    return this[3].toI32();
  }
}

export class Vault__vaultStatesResultValue0Struct extends ethereum.Tuple {
  get reserve(): BigInt {
    return this[0].toBigInt();
  }

  get tickPriceSatX42(): BigInt {
    return this[1].toBigInt();
  }

  get vaultId(): BigInt {
    return this[2].toBigInt();
  }
}

export class Vault__vaultStatesInputVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  TS_ISSUANCE_START(): BigInt {
    let result = super.call(
      "TS_ISSUANCE_START",
      "TS_ISSUANCE_START():(uint40)",
      [],
    );

    return result[0].toBigInt();
  }

  try_TS_ISSUANCE_START(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TS_ISSUANCE_START",
      "TS_ISSUANCE_START():(uint40)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, vaultId: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultId),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(
    account: Address,
    vaultId: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(vaultId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(
    owners: Array<Address>,
    vaultIds: Array<BigInt>,
  ): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultIds),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    owners: Array<Address>,
    vaultIds: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(owners),
        ethereum.Value.fromUnsignedBigIntArray(vaultIds),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  burn(
    isAPE: boolean,
    vaultParams: Vault__burnInputVaultParamsStruct,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "burn",
      "burn(bool,(address,address,int8),uint256):(uint144)",
      [
        ethereum.Value.fromBoolean(isAPE),
        ethereum.Value.fromTuple(vaultParams),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_burn(
    isAPE: boolean,
    vaultParams: Vault__burnInputVaultParamsStruct,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burn",
      "burn(bool,(address,address,int8),uint256):(uint144)",
      [
        ethereum.Value.fromBoolean(isAPE),
        ethereum.Value.fromTuple(vaultParams),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimSIR(vaultId: BigInt, lper: Address): BigInt {
    let result = super.call("claimSIR", "claimSIR(uint256,address):(uint80)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
      ethereum.Value.fromAddress(lper),
    ]);

    return result[0].toBigInt();
  }

  try_claimSIR(vaultId: BigInt, lper: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimSIR",
      "claimSIR(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralStates(token: Address): Vault__collateralStatesResultValue0Struct {
    let result = super.call(
      "collateralStates",
      "collateralStates(address):((uint112,uint144))",
      [ethereum.Value.fromAddress(token)],
    );

    return changetype<Vault__collateralStatesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_collateralStates(
    token: Address,
  ): ethereum.CallResult<Vault__collateralStatesResultValue0Struct> {
    let result = super.tryCall(
      "collateralStates",
      "collateralStates(address):((uint112,uint144))",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__collateralStatesResultValue0Struct>(value[0].toTuple()),
    );
  }

  cumulativeSIRPerTEA(vaultId: BigInt): BigInt {
    let result = super.call(
      "cumulativeSIRPerTEA",
      "cumulativeSIRPerTEA(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );

    return result[0].toBigInt();
  }

  try_cumulativeSIRPerTEA(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeSIRPerTEA",
      "cumulativeSIRPerTEA(uint256):(uint176)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserves(
    vaultParams: Vault__getReservesInputVaultParamsStruct,
  ): Vault__getReservesResultValue0Struct {
    let result = super.call(
      "getReserves",
      "getReserves((address,address,int8)):((uint144,uint144,int64))",
      [ethereum.Value.fromTuple(vaultParams)],
    );

    return changetype<Vault__getReservesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getReserves(
    vaultParams: Vault__getReservesInputVaultParamsStruct,
  ): ethereum.CallResult<Vault__getReservesResultValue0Struct> {
    let result = super.tryCall(
      "getReserves",
      "getReserves((address,address,int8)):((uint144,uint144,int64))",
      [ethereum.Value.fromTuple(vaultParams)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__getReservesResultValue0Struct>(value[0].toTuple()),
    );
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestTokenParams(): Vault__latestTokenParamsResult {
    let result = super.call(
      "latestTokenParams",
      "latestTokenParams():((string,string,uint8),(address,address,int8))",
      [],
    );

    return changetype<Vault__latestTokenParamsResult>(
      new Vault__latestTokenParamsResult(
        changetype<Vault__latestTokenParamsResultValue0Struct>(
          result[0].toTuple(),
        ),
        changetype<Vault__latestTokenParamsResultValue1Struct>(
          result[1].toTuple(),
        ),
      ),
    );
  }

  try_latestTokenParams(): ethereum.CallResult<Vault__latestTokenParamsResult> {
    let result = super.tryCall(
      "latestTokenParams",
      "latestTokenParams():((string,string,uint8),(address,address,int8))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__latestTokenParamsResult>(
        new Vault__latestTokenParamsResult(
          changetype<Vault__latestTokenParamsResultValue0Struct>(
            value[0].toTuple(),
          ),
          changetype<Vault__latestTokenParamsResultValue1Struct>(
            value[1].toTuple(),
          ),
        ),
      ),
    );
  }

  mint(isAPE: boolean, vaultParams: Vault__mintInputVaultParamsStruct): BigInt {
    let result = super.call(
      "mint",
      "mint(bool,(address,address,int8)):(uint256)",
      [
        ethereum.Value.fromBoolean(isAPE),
        ethereum.Value.fromTuple(vaultParams),
      ],
    );

    return result[0].toBigInt();
  }

  try_mint(
    isAPE: boolean,
    vaultParams: Vault__mintInputVaultParamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(bool,(address,address,int8)):(uint256)",
      [
        ethereum.Value.fromBoolean(isAPE),
        ethereum.Value.fromTuple(vaultParams),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfVaults(): BigInt {
    let result = super.call("numberOfVaults", "numberOfVaults():(uint48)", []);

    return result[0].toBigInt();
  }

  try_numberOfVaults(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfVaults",
      "numberOfVaults():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paramsById(vaultId: BigInt): Vault__paramsByIdResultValue0Struct {
    let result = super.call(
      "paramsById",
      "paramsById(uint48):((address,address,int8))",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );

    return changetype<Vault__paramsByIdResultValue0Struct>(result[0].toTuple());
  }

  try_paramsById(
    vaultId: BigInt,
  ): ethereum.CallResult<Vault__paramsByIdResultValue0Struct> {
    let result = super.tryCall(
      "paramsById",
      "paramsById(uint48):((address,address,int8))",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__paramsByIdResultValue0Struct>(value[0].toTuple()),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  systemParams(): Vault__systemParamsResultValue0Struct {
    let result = super.call(
      "systemParams",
      "systemParams():((uint16,uint16,bool,uint16))",
      [],
    );

    return changetype<Vault__systemParamsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_systemParams(): ethereum.CallResult<Vault__systemParamsResultValue0Struct> {
    let result = super.tryCall(
      "systemParams",
      "systemParams():((uint16,uint16,bool,uint16))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__systemParamsResultValue0Struct>(value[0].toTuple()),
    );
  }

  totalSupply(vaultId: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimedRewards(vaultId: BigInt, lper: Address): BigInt {
    let result = super.call(
      "unclaimedRewards",
      "unclaimedRewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );

    return result[0].toBigInt();
  }

  try_unclaimedRewards(
    vaultId: BigInt,
    lper: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimedRewards",
      "unclaimedRewards(uint256,address):(uint80)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(lper),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(vaultId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toString();
  }

  try_uri(vaultId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vaultStates(
    vaultParams: Vault__vaultStatesInputVaultParamsStruct,
  ): Vault__vaultStatesResultValue0Struct {
    let result = super.call(
      "vaultStates",
      "vaultStates((address,address,int8)):((uint144,int64,uint48))",
      [ethereum.Value.fromTuple(vaultParams)],
    );

    return changetype<Vault__vaultStatesResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_vaultStates(
    vaultParams: Vault__vaultStatesInputVaultParamsStruct,
  ): ethereum.CallResult<Vault__vaultStatesResultValue0Struct> {
    let result = super.tryCall(
      "vaultStates",
      "vaultStates((address,address,int8)):((uint144,int64,uint48))",
      [ethereum.Value.fromTuple(vaultParams)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__vaultStatesResultValue0Struct>(value[0].toTuple()),
    );
  }

  vaultTax(vaultId: BigInt): i32 {
    let result = super.call("vaultTax", "vaultTax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);

    return result[0].toI32();
  }

  try_vaultTax(vaultId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("vaultTax", "vaultTax(uint48):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(vaultId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  withdrawFees(token: Address): BigInt {
    let result = super.call("withdrawFees", "withdrawFees(address):(uint112)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toBigInt();
  }

  try_withdrawFees(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawFees",
      "withdrawFees(address):(uint112)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawToSaveSystem(tokens: Array<Address>, to: Address): Array<BigInt> {
    let result = super.call(
      "withdrawToSaveSystem",
      "withdrawToSaveSystem(address[],address):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens), ethereum.Value.fromAddress(to)],
    );

    return result[0].toBigIntArray();
  }

  try_withdrawToSaveSystem(
    tokens: Array<Address>,
    to: Address,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "withdrawToSaveSystem",
      "withdrawToSaveSystem(address[],address):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens), ethereum.Value.fromAddress(to)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get systemControl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sir(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get isAPE(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get vaultParams(): BurnCallVaultParamsStruct {
    return changetype<BurnCallVaultParamsStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnCallVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class ClaimSIRCall extends ethereum.Call {
  get inputs(): ClaimSIRCall__Inputs {
    return new ClaimSIRCall__Inputs(this);
  }

  get outputs(): ClaimSIRCall__Outputs {
    return new ClaimSIRCall__Outputs(this);
  }
}

export class ClaimSIRCall__Inputs {
  _call: ClaimSIRCall;

  constructor(call: ClaimSIRCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get lper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimSIRCall__Outputs {
  _call: ClaimSIRCall;

  constructor(call: ClaimSIRCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get vaultParams(): InitializeCallVaultParamsStruct {
    return changetype<InitializeCallVaultParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get isAPE(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get vaultParams(): MintCallVaultParamsStruct {
    return changetype<MintCallVaultParamsStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCallVaultParamsStruct extends ethereum.Tuple {
  get debtToken(): Address {
    return this[0].toAddress();
  }

  get collateralToken(): Address {
    return this[1].toAddress();
  }

  get leverageTier(): i32 {
    return this[2].toI32();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get vaultIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class UpdateSystemStateCall extends ethereum.Call {
  get inputs(): UpdateSystemStateCall__Inputs {
    return new UpdateSystemStateCall__Inputs(this);
  }

  get outputs(): UpdateSystemStateCall__Outputs {
    return new UpdateSystemStateCall__Outputs(this);
  }
}

export class UpdateSystemStateCall__Inputs {
  _call: UpdateSystemStateCall;

  constructor(call: UpdateSystemStateCall) {
    this._call = call;
  }

  get baseFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get lpFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get mintingStopped(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateSystemStateCall__Outputs {
  _call: UpdateSystemStateCall;

  constructor(call: UpdateSystemStateCall) {
    this._call = call;
  }
}

export class UpdateVaultsCall extends ethereum.Call {
  get inputs(): UpdateVaultsCall__Inputs {
    return new UpdateVaultsCall__Inputs(this);
  }

  get outputs(): UpdateVaultsCall__Outputs {
    return new UpdateVaultsCall__Outputs(this);
  }
}

export class UpdateVaultsCall__Inputs {
  _call: UpdateVaultsCall;

  constructor(call: UpdateVaultsCall) {
    this._call = call;
  }

  get oldVaults(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get newVaults(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get newTaxes(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }

  get cumTax(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class UpdateVaultsCall__Outputs {
  _call: UpdateVaultsCall;

  constructor(call: UpdateVaultsCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get totalFeesToStakers(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawToSaveSystemCall extends ethereum.Call {
  get inputs(): WithdrawToSaveSystemCall__Inputs {
    return new WithdrawToSaveSystemCall__Inputs(this);
  }

  get outputs(): WithdrawToSaveSystemCall__Outputs {
    return new WithdrawToSaveSystemCall__Outputs(this);
  }
}

export class WithdrawToSaveSystemCall__Inputs {
  _call: WithdrawToSaveSystemCall;

  constructor(call: WithdrawToSaveSystemCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawToSaveSystemCall__Outputs {
  _call: WithdrawToSaveSystemCall;

  constructor(call: WithdrawToSaveSystemCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
