// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class APE__burnResultNewReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class APE__burnResultFeesStruct extends ethereum.Tuple {
  get collateralInOrWithdrawn(): BigInt {
    return this[0].toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this[1].toBigInt();
  }

  get collateralFeeToGentlemen(): BigInt {
    return this[2].toBigInt();
  }

  get collateralFeeToProtocol(): BigInt {
    return this[3].toBigInt();
  }
}

export class APE__burnResult {
  value0: APE__burnResultNewReservesStruct;
  value1: APE__burnResultFeesStruct;

  constructor(
    value0: APE__burnResultNewReservesStruct,
    value1: APE__burnResultFeesStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getNewReserves(): APE__burnResultNewReservesStruct {
    return this.value0;
  }

  getFees(): APE__burnResultFeesStruct {
    return this.value1;
  }
}

export class APE__burnInputReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class APE__mintResultNewReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class APE__mintResultFeesStruct extends ethereum.Tuple {
  get collateralInOrWithdrawn(): BigInt {
    return this[0].toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this[1].toBigInt();
  }

  get collateralFeeToGentlemen(): BigInt {
    return this[2].toBigInt();
  }

  get collateralFeeToProtocol(): BigInt {
    return this[3].toBigInt();
  }
}

export class APE__mintResult {
  value0: APE__mintResultNewReservesStruct;
  value1: APE__mintResultFeesStruct;
  value2: BigInt;

  constructor(
    value0: APE__mintResultNewReservesStruct,
    value1: APE__mintResultFeesStruct,
    value2: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getNewReserves(): APE__mintResultNewReservesStruct {
    return this.value0;
  }

  getFees(): APE__mintResultFeesStruct {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }
}

export class APE__mintInputReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class APE extends ethereum.SmartContract {
  static bind(address: Address): APE {
    return new APE("APE", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(
    from: Address,
    baseFee: i32,
    tax: i32,
    reserves: APE__burnInputReservesStruct,
    amount: BigInt,
  ): APE__burnResult {
    let result = super.call(
      "burn",
      "burn(address,uint16,uint8,(uint144,uint144,int64),uint256):((uint144,uint144,int64),(uint144,uint144,uint144,uint144))",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseFee)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tax)),
        ethereum.Value.fromTuple(reserves),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return changetype<APE__burnResult>(
      new APE__burnResult(
        changetype<APE__burnResultNewReservesStruct>(result[0].toTuple()),
        changetype<APE__burnResultFeesStruct>(result[1].toTuple()),
      ),
    );
  }

  try_burn(
    from: Address,
    baseFee: i32,
    tax: i32,
    reserves: APE__burnInputReservesStruct,
    amount: BigInt,
  ): ethereum.CallResult<APE__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(address,uint16,uint8,(uint144,uint144,int64),uint256):((uint144,uint144,int64),(uint144,uint144,uint144,uint144))",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseFee)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tax)),
        ethereum.Value.fromTuple(reserves),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<APE__burnResult>(
        new APE__burnResult(
          changetype<APE__burnResultNewReservesStruct>(value[0].toTuple()),
          changetype<APE__burnResultFeesStruct>(value[1].toTuple()),
        ),
      ),
    );
  }

  collateralToken(): Address {
    let result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  debtToken(): Address {
    let result = super.call("debtToken", "debtToken():(address)", []);

    return result[0].toAddress();
  }

  try_debtToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("debtToken", "debtToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  leverageTier(): i32 {
    let result = super.call("leverageTier", "leverageTier():(int8)", []);

    return result[0].toI32();
  }

  try_leverageTier(): ethereum.CallResult<i32> {
    let result = super.tryCall("leverageTier", "leverageTier():(int8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  mint(
    to: Address,
    baseFee: i32,
    tax: i32,
    reserves: APE__mintInputReservesStruct,
    collateralDeposited: BigInt,
  ): APE__mintResult {
    let result = super.call(
      "mint",
      "mint(address,uint16,uint8,(uint144,uint144,int64),uint144):((uint144,uint144,int64),(uint144,uint144,uint144,uint144),uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseFee)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tax)),
        ethereum.Value.fromTuple(reserves),
        ethereum.Value.fromUnsignedBigInt(collateralDeposited),
      ],
    );

    return changetype<APE__mintResult>(
      new APE__mintResult(
        changetype<APE__mintResultNewReservesStruct>(result[0].toTuple()),
        changetype<APE__mintResultFeesStruct>(result[1].toTuple()),
        result[2].toBigInt(),
      ),
    );
  }

  try_mint(
    to: Address,
    baseFee: i32,
    tax: i32,
    reserves: APE__mintInputReservesStruct,
    collateralDeposited: BigInt,
  ): ethereum.CallResult<APE__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint16,uint8,(uint144,uint144,int64),uint144):((uint144,uint144,int64),(uint144,uint144,uint144,uint144),uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(baseFee)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tax)),
        ethereum.Value.fromTuple(reserves),
        ethereum.Value.fromUnsignedBigInt(collateralDeposited),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<APE__mintResult>(
        new APE__mintResult(
          changetype<APE__mintResultNewReservesStruct>(value[0].toTuple()),
          changetype<APE__mintResultFeesStruct>(value[1].toTuple()),
          value[2].toBigInt(),
        ),
      ),
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tax(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get reserves(): BurnCallReservesStruct {
    return changetype<BurnCallReservesStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get newReserves(): BurnCallNewReservesStruct {
    return changetype<BurnCallNewReservesStruct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get fees(): BurnCallFeesStruct {
    return changetype<BurnCallFeesStruct>(
      this._call.outputValues[1].value.toTuple(),
    );
  }
}

export class BurnCallReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class BurnCallNewReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class BurnCallFeesStruct extends ethereum.Tuple {
  get collateralInOrWithdrawn(): BigInt {
    return this[0].toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this[1].toBigInt();
  }

  get collateralFeeToGentlemen(): BigInt {
    return this[2].toBigInt();
  }

  get collateralFeeToProtocol(): BigInt {
    return this[3].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get debtToken_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get collateralToken_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get tax(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get reserves(): MintCallReservesStruct {
    return changetype<MintCallReservesStruct>(
      this._call.inputValues[3].value.toTuple(),
    );
  }

  get collateralDeposited(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get newReserves(): MintCallNewReservesStruct {
    return changetype<MintCallNewReservesStruct>(
      this._call.outputValues[0].value.toTuple(),
    );
  }

  get fees(): MintCallFeesStruct {
    return changetype<MintCallFeesStruct>(
      this._call.outputValues[1].value.toTuple(),
    );
  }

  get amount(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class MintCallReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class MintCallNewReservesStruct extends ethereum.Tuple {
  get reserveApes(): BigInt {
    return this[0].toBigInt();
  }

  get reserveLPers(): BigInt {
    return this[1].toBigInt();
  }

  get tickPriceX42(): BigInt {
    return this[2].toBigInt();
  }
}

export class MintCallFeesStruct extends ethereum.Tuple {
  get collateralInOrWithdrawn(): BigInt {
    return this[0].toBigInt();
  }

  get collateralFeeToStakers(): BigInt {
    return this[1].toBigInt();
  }

  get collateralFeeToGentlemen(): BigInt {
    return this[2].toBigInt();
  }

  get collateralFeeToProtocol(): BigInt {
    return this[3].toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
